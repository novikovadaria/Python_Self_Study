# ...................................................Функции..............................................
# Объявление функции
def hello():
    # А здесь началось тело функции
    print('Приветствую тебя, джедай Питона!')

# Пока функция не вызвана — она не выполняется: она просто лежит и ждёт своего часа.

# ...................................................Параметры и аргументы функции.........................
# С приветствием понятно: вызвали — поздоровались. Но это довольно простой пример: при вызове функция hello() постоянно выводит одну и ту же строку.
# А что делать, если нужно поздороваться, но в приветствии упомянуть имя: Максим, приветствую тебя!?
# Можно так:


def hello():
    print('Максим, приветствую тебя!')


hello()
# Но тогда придётся для каждого имени писать новую функцию. Хорошо бы вместо имени подставить переменную:
name = input("")


def hello():
    print(name + ', приветствую тебя!')


hello()
# Красиво, но не сработает: функция не знает, что за переменная name и какое у неё значение.
# Решение есть: при объявлении функции можно указывать параметры функции — переменные, которые будут обрабатываться в её теле. Имена для параметров придумывает сам разработчик.
# Значения для этих параметров передаются при вызове; передаваемые при вызове значения называют аргументами функции.

# ......................................................Отсутствие обязательного аргумента.........................

# Если при вызове забудут передать имя - значением name будет слово 'Инкогнито'; а если вызвать функцию, не передав название планеты -
# функция присвоит переменной planet значение "Икс"


def print_home(name='Инкогнито', planet='Икс'):
    print(name + ' живёт на планете ' + planet)


# Передаём только один аргумент вместо двух
print_home('Дроид-убийца')

# ......................................................Именованные и позиционные аргументы.................................
# первый аргумент передаётся в первый параметр, второй аргумент — во второй параметр. Это называется позиционные аргументы.
# При вызове функции забыли передать имя персонажа, и теперь название планеты — единственный, а значит — первый аргумент, и он будет передан в параметр name!


def print_home(name='Инкогнито', planet='Икс'):
    print(name + ' живёт на планете ' + planet)


print_home('Земля')

# ...........................................................Именованные аргументы .......................................
# Добавим значение по умолчанию для аргумента name


def print_home(name='Инкогнито', planet='Икс'):
    print(name + ' живёт на планете ' + planet)


# Передаём именованный параметр:
# явно указываем, что значение 'Земля' предназначено для параметра planet
print_home(planet='Земля')

# Ещё раз вызовем функцию: передадим два именованных параметра,
# но не в том порядке, как они указаны в объявлении функции:
print_home(planet='Земля', name='Винни Пух')

# ........................................................Задача 1...........................
# Настройте функцию так, чтобы она не сломалась при вызове без аргументов


def lets_go(name='Друг', target="учить Python"):
    print(name + ', пойдём ' + target)


lets_go()

# Вызовите функцию lets_go без аргументов

# ........................................................Задача 2..................................
# Исправьте вызов функции так, чтобы аргумент, указанный при вызове, был передан в параметр target. Вызов с именованными аргументами поможет решить эту задачу.


def lets_go(name='Друг', target='учить Python'):

    print(name + ', пойдём ' + target)
# Исправьте вызов так, чтобы аргумент был передан
# в параметр с именем target


lets_go(target='читать следующий урок!')

# .....................................................Счётчики................................
flat = [
    5.55, 22.19, 7.78, 26.86, 5.55,
    29.84, 22.19, 5.55, 16.85, 4.52
]

# len(flat) подсчитает количество элементов в списке flat
# Сохраним это значение в переменную rooms_num
rooms_num = len(flat)

# И напечатаем полученное значение
print(rooms_num)

flat = [
    5.55, 22.19, 7.78, 26.86, 5.55,
    29.84, 22.19, 5.55, 16.85, 4.52
]

# Сохраним искомое значение в переменной, так будет проще работать.
room_size = 22.19

# В переменной count будем подсчитывать
# количество обнаруженных помещений нужной площади.
# Пока что она равна нулю.
count = 0

# Объявляем цикл: из списка flat все значения по очереди будут передаваться
# в переменную room
for room in flat:
    # Проверяем, равно ли значение переменной room искомому значению
    if room == room_size:
        # Если значения room и room_size равны -
        # переменной count присваиваем её предыдущее значение,
        # увеличенное на единицу
        count = count + 1

# Этот код выполнится только после того,
# как цикл переберёт все элементы списка flat.
# В переменной count будет сохранено количество помещений с площадью 22.19
print('Комнат площадью', room_size, 'кв.м:', count)

# ................................................................. Оператор +=.....................................
# С помощью += можно сделать код короче и проще.
# Например
counter = 0
counter += 10  # На каждом шаге counter увеличивается на десять

flat = [
    5.55, 22.19, 7.78, 26.86, 5.55,
    29.84, 22.19, 5.55, 16.85, 4.52
]

# В переменной sum_area будем суммировать площади комнат.
# Пока что она равна нулю.
sum_area = 0

for room in flat:
    # На каждой итерации цикла прибавляем к sum_area площадь ещё одной комнаты
    # Запишем эту операцию через сокращённый синтаксис +=
    sum_area += room

print('Общая площадь =', sum_area)

# Список годов, в которые Depeche Mode выпускала альбомы
years = [
    1981, 1982, 1983, 1984, 1986, 1987, 1990,
    1993, 1997, 2001, 2005, 2009, 2013, 2017
]

# В этой переменной будем подсчитывать количество альбомов.
# Пока что в ней ничего нет, она равна нулю.
count = 0

for year in years:
    if year > 2000:
        # Каждый раз загибаем по одному пальцу,
        # обнаружив альбом, выпущенный в 21 веке.
        count += 1   # Это то же самое, что count = count + 1

print('Выпущено альбомов в XXI веке:', count)


def number_of_occurrences(char, string):
    count = 0
    for letter in string:
        if letter == char:
            count += 1
        # И если letter равна char - увеличивайте счётчик count на 1
        ...

    # Печатаем исходную строку:
    print('Исходная строка:', string)
    # Печатаем результат подсчётов:
    print('Количество вхождений символа', char, 'составляет:', count)


# Код ниже не изменяйте
phrase = 'Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили.'

# Вызываем функцию number_of_occurrences(), чтобы она посчитала,
# сколько раз во фразе phrase встречается буква 'е'
number_of_occurrences('е', phrase)

may_2017 = [24, 26, 15, 10, 15, 19, 10, 1, 4, 7, 7, 7, 12, 14, 17,
            8, 9, 19, 21, 22, 11, 15, 19, 23, 15, 21, 16, 13, 25, 17, 19]
may_2018 = [20, 27, 23, 18, 24, 16, 20, 24, 18, 15, 19, 25, 24, 26,
            19, 24, 25, 21, 17, 11, 20, 21, 22, 23, 18, 20, 23, 18, 22, 23, 11]


def comfort_count(temperatures):
    count = 0
    for temp in temperatures:
        if temp >= 22 and temp <= 26:
            count += 1
    print('Количество тёплых дней в этом месяце:', count)
    ...


# Дальше код не меняйте
comfort_count(may_2017)  # Узнаем, что было в мае 2017 г.
comfort_count(may_2018)  # Узнаем, что было в мае 2018 г.

# .............................................................return()........................................................
# Функция для вычисления площади прямоугольника;
# от англ. calculate, «вычислять»


def calc_square(side_a, side_b):
    # Вычисляем площадь и присваиваем результат переменной result
    result = side_a * side_b
    # Функция возвращает значение переменной result:
    return result


# Вызываем функцию calc_square() с аргументами 16 и 9.
# Значение, которое вернёт функция, будет присвоено переменной rectangle_area
rectangle_area = calc_square(16, 9)

print(rectangle_area)


def calc_square(side_a, side_b):
    result = side_a * side_b
    # Функция возвращает значение переменной result:
    return result


# Вызовем функцию calc_square(), передав в неё размеры первой комнаты;
# функция вычислит площадь комнаты и вернёт её;
# вернувшееся значение присвоим переменной room1.
room1 = calc_square(3, 5)

# Вычислим и сохраним в переменную room2 площадь второй комнаты:
room2 = calc_square(4, 6)

# Площадь третьей комнаты сохраним в room3:
room3 = calc_square(3, 6)

# Теперь можно суммировать полученные значения и напечатать результат:

rooms_sum = room1 + room2 + room3
print('Суммарная площадь комнат равна', rooms_sum, 'кв.м')
