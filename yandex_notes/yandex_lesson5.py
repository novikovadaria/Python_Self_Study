# ........................................ Что такое библиотеки?....................
# Библиотека или модуль — это набор готовых функций, объединённых общей темой.
# Чтобы получить доступ к этим функциям, нужно в начале программы импортировать библиотеку командой import — «подключить» её.
# Тогда в коде можно будет применять все функции, которые есть в библиотеке.
# После импорта можно, например, при помощи функции sqrt() библиотеки math извлечь квадратный корень из заданного числа.
# Чтобы вызвать функцию из импортированной библиотеки — к ней обращаются через имя библиотеки: имя_библиотеки.имя_функции.
# Импорт библиотеки math.
import datetime as dt
from random import choice
import random as r
from random import choice  # Импорт одной функции из библиотеки
import math

# Теперь в программе можно применять любые функции из неё.
square_root = math.sqrt(16)
print(square_root)

# Импортируем библиотеку random — и станут доступны её функции, например
# функция random.randint(min, max) выберет случайное целое число в диапазоне от числа min до числа max;
# функция random.choice(список) вернёт случайный элемент из списка;
# функция random.random() вернёт случайное дробное число от 0.0 до 1.0.
# Если все функции библиотеки не нужны, можно импортировать только те,
#  которые требуются: from random import choice (из библиотеки random подключить функцию choice).


def find_a_present(prizes):
    # Обращаемся к функции напрямую: choice(), а не random.choice()
    return choice(prizes)


print(find_a_present(['кукла', 'жвачка', 'игрушечный питон']))
print(find_a_present(['мяч', 'чебурашка', 'лосяш']))


# Теперь к библиотеке random нужно обращаться только через псевдоним r:
print(r.randint(0, 100))  # Случайное целое число от 0 до 100

# ...........................................................................Задача.............................

answers = ['Норм.', 'Лучше всех :)', 'Ну так',
           'Отличненько!', 'Ничего, жить буду']


def how_are_you():
    return choice(answers)


print(how_are_you())

# .......................................................Работа со временем.................................

# Взлёт: 1961 год, 12 апреля, 9 часов утра, 7 минут
start_time = dt.datetime(1961, 4, 12, 9, 7, 0)

print('Уже', start_time, 'Поехали!')

# Тип данных datetime позволяет просто вычитать даты друг из друга, как обычные числа.
# Если решать такие задачи обычными математическими выражениями — код будет гораздо сложнее.
# Вычислим время между стартом Гагарина и его приземлением:

start_time = dt.datetime(1961, 4, 12, 9, 7, 0)

# Дата и время посадки: 1961 год, 12 апреля, 10 часов, 55 минут
landing_time = dt.datetime(1961, 4, 12, 10, 55, 0)

print(landing_time - start_time)

# При создании данных типа datetime можно не указывать время и обойтись только датой.
# В этом случае метка времени будет установлена автоматически, это будет полночь, начало заданной даты:

start_day = dt.datetime(1961, 4, 12)

print(start_day)

# ............................................................Задача 1................................
start_time = dt.datetime(2011, 4, 17)
final_time = dt.datetime(2019, 4, 15)
duration = start_time - final_time
print(duration)

# ............................................................Задача 2...........................

start_moment = dt.datetime(2022, 6, 25, 11, 3)  # Напишите код здесь
current_moment = dt.datetime(2022, 7, 2, 9, 52)  # и здесь

total_time = current_moment - start_moment  # и здесь

print(total_time)

# ..........................................................Стандарт времени UTC..................................

utc_time = dt.datetime.utcnow()
print(utc_time)


# Как и раньше - определяем текущее время UTC
utc_time = dt.datetime.utcnow()

# Создаём промежуток времени в три часа
period = dt.timedelta(hours=3)

# И прибавляем к значению времени по UTC поправку в три часа:
moscow_time = utc_time + period

# Печатаем
print(moscow_time)

# В аргументах функции timedelta() можно указывать days, hours, minutes, seconds, microseconds

# .............................................................................. Задача 1........................................

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(city):
    # напишите код тела функции
    # пусть она вернет время в городе city
    time_in_city = dt.timedelta(hours=UTC_OFFSET[city]) + dt.datetime.utcnow()
    return time_in_city

    # Напишите код тела функции;
    # она должна вернуть текущее время в городе city


print(what_time('Екатеринбург'))

# .....................................................................Задача 2............................................

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь'
}

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(friend):
    city = DATABASE[friend]
    current_time = dt.timedelta(hours=UTC_OFFSET[city]) + dt.datetime.utcnow()
    return current_time
    # напишите код т
    # пусть она вернет время у друга из аргумента friend


print(what_time('Соня'))

# ...................................метод strftime()..................
arrival_time = dt.datetime(2019, 5, 10, 19, 45)
print('Самолёт прибывает в', arrival_time.strftime('%H:%M'))
# Самолёт прибывает в 19:45
# Кроме этих параметров, бывают ещё, например %B — месяц, %Y — год и %S — секунды, %A — название дня недели по-английски, %U — номер недели в году.


# дата первого осеннего снега в Новосибирске в 2018
first_snow = dt.datetime(2018, 9, 9)

# дата последнего весеннего снега в Новосибирске в 2018
last_snow = dt.datetime(2018, 5, 19)

print(last_snow.strftime('Последний снег выпал в %U-ю неделю года.'))
print(first_snow.strftime('А первый снег пошёл в %U-ю неделю.'))
