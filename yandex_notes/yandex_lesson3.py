# .................................................Коллекции в Python..............................
concert_songs = ['Ничего на свете лучше нету', 'Мы к вам заехали на час', 'Рок-колыбельная',
                 'Луч Солнца Золотого', 'Куда ты, тропинка, меня завела', 'А как известно, мы народ горячий']
# Для удобства чтения кода коллекции записывают построчно: каждый элемент — на отдельной строке. На работу кода это не влияет, а выглядит лучше:
concert_songs = [
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная',
    'Луч Солнца Золотого',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий'
]

# ....................................................Множества (set)................................
# Одно из важных отличий множества от других коллекций — все элементы множества должны быть уникальны,
# в множестве не может быть двух одинаковых элементов.
concert_songs = {
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная',
    'Луч Солнца Золотого',
    'Ничего на свете лучше нету',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий'
}
# Выясним, к какому типу данных принадлежит переменная concert_songs
# для этого есть встроенная в Python функция type()
print(type(concert_songs))

# Напечатаем содержимое переменной concert_songs
print(concert_songs)
# При каждом запуске порядок отличается от предыдущего.

# ........................................................Преобразование list в множество...................
songs_list = [
    'Мы к вам заехали на час',
    'А как известно, мы народ горячий',
    'Куда ты, тропинка, меня завела',
    'Луч Солнца Золотого',
    'Рок-колыбельная',
    'Рок-колыбельная',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий',
    'Луч Солнца Золотого',
    'Ничего на свете лучше нету',
    'А как известно, мы народ горячий',
    'Луч Солнца Золотого',
    'Мы к вам заехали на час',
    'Ничего на свете лучше нету',
    'Куда ты, тропинка, меня завела',
    'Луч Солнца Золотого'
]

# Преобразуем список songs_list в сет
# и запишем этот сет в переменную unique_songs:
unique_songs = set(songs_list)

print(unique_songs)

unique_songs = {
    'Рок-колыбельная',
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'А как известно, мы народ горячий',
    'Луч Солнца Золотого',
    'Куда ты, тропинка, меня завела'
}
# Сначала напечатаем заголовок афиши
print('Только один концерт! Проездом из Бремена в Рио-де-Жанейро!')
print('БРЕМЕНСКИЕ МУЗЫКАНТЫ!')

# Объявляем цикл
for song in unique_songs:
    print(song)

# А эта строка выполнится после того,
# как цикл закончит работу
print('Не опаздывайте, начало в 19:00')

cities = [
    'Вологда',
    'Чебоксары',
    'Тольятти',
    'Москва',
    'Бремен',
    'Санкт-Петербург',
    'Новороссийск',
    'Челябинск',
    'Вологда',
    'Новосибирск',
    'Челябинск',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск'
]

unique_cities = set(cities)
for city in unique_cities:
    print("-", city)


cities = [
    'Вологда',
    'Чебоксары',
    'Тольятти',
    'Москва',
    'Бремен',
    'Санкт-Петербург',
    'Новороссийск',
    'Челябинск',
    'Вологда',
    'Новосибирск',
    'Челябинск',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск'
]

unique_cities = set(cities)
for city in unique_cities:
    print(f"У меня есть друг в городе {city}")

# .........................................................Добавление нового элемента в множество....................................
# Чтобы добавить новый элемент в множество, к нему применяют метод add()
# Метод add() в качестве аргумента принимает значение, которое нужно добавить в множество. Этот метод может добавить лишь один элемент;
# чтобы добавить несколько элементов — нужно вызвать метод add() несколько раз с разными аргументами.
playlist = {
    'Venus',
    'Yesterday',
    'Fireball',
    'Time',
    'Poison'
}

playlist.add('Thunderstruck')
print(playlist)
# Будет напечатано:
# {'Yesterday', 'Fireball', 'Thunderstruck', 'Poison', 'Venus', 'Time'}
# Элементы множеств никогда не соблюдают порядок!

# Метод union() применяют для объединения двух множеств. Метод применяется к одному множеству, а в аргументе передаётся второе.
playlist_1 = {'Три белых коня', 'Happy new year', 'Снежинка'}
playlist_2 = {'Last christmas', 'Снежинка', 'Happy new year'}
playlist_3 = playlist_1.union(playlist_2)

print(playlist_3)
# ..................................................................Поиск различий в двух множествах..................
# метод difference()
# Метод set_1.difference(set_2) вернёт новое множество, оно будет содержать только те элементы, которые присутствуют в set_1,
# но отcутствуют в set_2; это похоже на «вычитание»: set_1 - set_2.
playlist_1 = {'Голубой вагон', 'Облака', 'Yesterday', 'Наше лето'}
playlist_2 = {'Наше лето', 'Голубой вагон', 'Облака'}
playlist_3 = playlist_1.difference(playlist_2)

print(playlist_3)
# ....................................................Поиск одинаковых элементов в двух множествах...............................
# метод intersection()
films_1 = {'Форсаж', 'Достучаться до небес', 'Мстители: война бесконечности'}
films_2 = {'Мстители: война бесконечности', 'Форсаж', 'Матрица'}
films_3 = films_1.intersection(films_2)

print(films_3)

# ..................................................Задача.........................
# Напишите функцию add_cities(), которая добавит элементы из списка new_cities в all_cities.


def print_valid_cities(all_cities, used_cities):
    diff = all_cities.difference(used_cities)
    for city in diff:
        print(city)


def add_cities(all_cities, new_cities):
    for city in new_cities:
        all_cities.add(city)


# Анфиса нашла названия нескольких новых городов,
# эти города нужно добавить в множество all_cities
new_cities = [
    'Екатеринбург',
    'Выборг',
    'Владивосток',
    'Казань',
    'Why',
    'Йезд'
]

all_cities = {
    'Абакан',
    'Астрахань',
    'Бобруйск',
    'Калуга',
    'Караганда',
    'Кострома',
    'Липецк',
    'Новосибирск'
}

used_cities = {
    'Калуга',
    'Абакан',
    'Новосибирск'
}

add_cities(all_cities, new_cities)
print_valid_cities(all_cities, used_cities)

# .........................................................Словари.......................
# Словарь — это коллекция, набор элементов, разделённых запятой. Каждый элемент словаря состоит из двух частей,
# между этими частями ставится двоеточие: первая часть элемента называется ключ, вторая часть — значение.
english = {
    # Первый элемент словаря (да, в каждом элементе две части!)
    'рука': 'hand',
    'нога': 'leg',  # Второй элемент словаря
    'хвост': 'tail',  # Третий элемент
    'питон': 'python',  # Четвёртый элемент
    'бэкенд-разработчик': 'back-end developer'  # Пятый элемент
}

english = {
    'рука': 'hand',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer'
}

# Доступ по ключу: как по-английски рука?
print(english['рука'])

# Замена значения
english = {
    'рука': 'hand',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer'
}

# Элементу с ключом 'рука' присвоим новое значение
english['рука'] = 'arm'

print(english['рука'])

# Словарь, в котором хранятся начертания букв и их названия
old_letters = {
    'ять': 'Ѣ',
    'юс малый': 'Ѧ',
    'юс большой': 'Ѫ'}

print(old_letters.values())
# Будет напечатан список значений словаря
# dict_values(['Ѣ', 'Ѧ', 'Ѫ'])

# Подобным образом можно получить и коллекцию ключей словаря, для этого есть метод keys():


favorite_songs = {

    'Тополиный пух': 'Иванушки international',

    'Город золотой': 'Аквариум',

    'Звезда по имени Солнце': 'Кино'

}


print(favorite_songs.keys())

# Будет напечатан список ключей словаря

# dict_keys(['Тополиный пух', 'Город золотой', 'Звезда по имени Солнце'])
# Метод values() возвращает коллекцию типа dict_values(), а метод keys() — коллекцию типа dict_keys().
# Это коллекции, похожие на списки; их можно преобразовать в списки или в множества — и работать с ними.
english = {
    'рука': 'hand',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer'
}
# Собираем ключи словаря в коллекцию
# и преобразуем эту коллекцию в список
words_ru = list(english.keys())

# Собираем значения словаря в коллекцию
# и преобразуем эту коллекцию в список
words_en = list(english.values())

# Печатаем списки
print(words_ru)

print(words_en)

# ....................................................Преобразование словаря в список или сет.......................
# функция set(имя_словаря) преобразует словарь в множество;
# функция list(имя_словаря) превратит словарь в список.
# Но в таких преобразованиях есть особенность: множество или список,
# которые получатся в результате, будут включать только ключи словаря, а значения будут проигнорированы.

friends = {
    'Серёга': 'Оренбург',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

friends.values()

for city in set(friends.values()):
    print(city)


# ....................................................Расширение словаря............................
# Добавление одного элемента
# Для добавления нового элемента можно применить доступ по ключу: объявить новый ключ словаря и присвоить ему значение.
english = {
    'рука': 'arm',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer'
}

# Создаём новый элемент словаря через доступ по ключу
english['голова'] = 'head'
# если вызван существующий в словаре ключ — его значение будет заменено;
# если вызван ключ, которого нет в словаре — будет создан новый элемент словаря.
english = {
    'рука': 'arm',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer',
    'голова': 'head'
}

# Создаём несколько новых элементов словаря с одинаковым ключом
english['гриф'] = 'vulture'  # Будет создан элемент с ключом 'гриф'.
english['гриф'] = 'neck'  # Значение под ключом 'гриф' будет заменено.
english['гриф'] = 'stamp'  # Значение под ключом 'гриф' будет ещё раз заменено.

print(english)

# ...........................................................Одновременное добавление нескольких элементов.....................................
# update()
english = {
    'рука': 'arm',
    'нога': 'leg',
    'хвост': 'tail',
    'питон': 'python',
    'бэкенд-разработчик': 'back-end developer',
    'голова': 'head'
}

# Объявим новый словарь
new_words = {'мозг': 'brain', 'логика': 'logic'}

# Добавим в словарь english элементы словаря new_words
english.update(new_words)

# Посмотрим, что теперь хранится в словаре english
print(english)

# Заодно выясним, что произошло со словарём new_words
print(new_words)


# ............................................................Перебор элементов словаря...........................
favorite_songs = {
    'Тополиный пух': 'Иванушки international',
    'Город золотой': 'Аквариум',
    'Звезда по имени Солнце': 'Кино',
    'Space Oddity': 'David Bowie',
    'Рыба': 'Аквариум',
    'Серенада Трубадура': 'Муслим Магомаев',
}
# Здесь напечатайте значение для ключа 'Тополиный пух'
print(favorite_songs['Тополиный пух'])
print(favorite_songs['Space Oddity'])
# метод items()
# Этот метод извлекает из каждого элемента словаря ключ и значение и передаёт их в переменные song и performer.
favorite_songs = {
    'Тополиный пух': 'Иванушки international',
    'Город золотой': 'Аквариум',
    'Звезда по имени Солнце': 'Кино',
    'Space Oddity': 'David Bowie',
    'Рыба': 'Аквариум',
    'Серенада Трубадура': 'Муслим Магомаев',
}

for song, performer in favorite_songs.items():
    print('Песню ' + song + ' исполняет ' + performer)

# ..............................................................Ключи отдельно, значения — отдельно..................................
# keys() и values()
# Процесс перебора ключей словаря в цикле называют «итерировать по ключам»; перебирать значения словаря — «итерировать по значениям».
# Если в цикле применён метод keys() или values(), то нужно объявлять только одну переменную цикла:
favorite_songs = {
    'Тополиный пух': 'Иванушки international',
    'Город золотой': 'Аквариум',
    'Звезда по имени Солнце': 'Кино',
    'Space Oddity': 'David Bowie',
    'Рыба': 'Аквариум',
    'Серенада Трубадура': 'Муслим Магомаев',
}
# Извлечём и напечатаем только значения (values) каждого элемента
for singer in favorite_songs.values():
    print('Доктор, я больше не могу слушать исполнителя ' + singer)

# А в этом цикле извлечём и напечатаем только ключи (keys) словаря
for music in favorite_songs.keys():
    print('Доктор, я каждый день по три раза слушаю песню ' + music)

# Если при объявлении цикла после названия словаря не указать метод — цикл будет перебирать ключи словаря.
friends_names = ['Аня', 'Коля', 'Лёша', 'Лена', 'Миша']
friends_cities = ['Владивосток', 'Красноярск',
                  'Москва', 'Обнинск', 'Чебоксары']

# Объявлен пустой словарь, его нужно будет наполнить элементами,
# каждый из которых составлен по схеме "имя: город"
friends = {}

# Допишите ваш код сюда
for i in range(0, len(friends_names)):
    friends = {friends_names[i]: friends_cities[i]}


print(friends_names[3], "живёт в городе", friends_cities[3])

# .................................................................Операции с коллекциями....................
# Список (list): в квадратных скобках:
sleep_list = [
    'спать',
    'дрыхнуть',
    'кемарить',
    'спать'
]

# Множество (set): в фигурных скобках, элементы выглядят как в списке,
# но не могут повторяться:
sleep_set = {
    'дрыхнуть',
    'спать',
    'кемарить'
}
# Словарь (dict): в фигурных скобках, элементы выглядят как ключ:значение;
# ключи не могут повторяться:
sleep_dict = {
    'спать': 'дрыхнуть',
    'почивать': 'кемарить'
}

# Есть ли элемент 'дрыхнуть' в списке sleep_list?
if 'дрыхнуть' in sleep_list:
    print('В списке: нашлось!')
else:
    print('В списке: не нашлось :(')

# Есть ли элемент 'дрыхнуть' в сете sleep_set?
if 'дрыхнуть' in sleep_set:
    print('В сете: нашлось!')
else:
    print('В сете: не нашлось :(')

# Есть ли элемент 'дрыхнуть' в словаре sleep_dict?
if 'дрыхнуть' in sleep_dict:
    print('В словаре: нашлось!')
else:
    print('В словаре: не нашлось :(')

# Если нужно убедиться, что определённого элемента нет в коллекции — поможет логический оператор not
# Список животных в лесу Белого Рыцаря
forest_list = ['лось', 'коза', 'барсук', 'глухарь', 'лиса', 'ёж']

if 'слонёнок' not in forest_list:
    print('но нету слонёнка в лесу у меня,')
    print('слонёнка весёлого нет!')

# .............................................................Добавление элементов в коллекции...............................
# append()

# Добавить новый элемент в множество можно методом add(), он работает аналогично методу append() для списков.
# Отличие лишь в том, что новый элемент будет добавлен не в конец множества (ведь множество не упорядочено, и у него нет начала и конца).
# ...........................................................Задача 1....................................................
# Добавьте в множество playlist несколько новых композиций (они собраны в списке new_music).
# Вызывать вручную метод add() для каждой новой записи будет нерационально, пусть за вас потрудится цикл for...in
playlist = {
    'Venus',
    'Yesterday',
    'Fireball',
    'Time',
    'Poison',
    'Thunderstruck'
}
new_music = [
    'Kashmir',
    'Smoke on the Water',
    'Bohemian Rhapsody',
    'Zombie',
    'Let It Be',
    'Its My Life',
]
for song in new_music:
    playlist.add(song)

print(playlist)

# ............................................Задача 2......................
friends = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Хабаровск',
    'Егор': 'Пермь'
}


def is_anyone_in(collection, city):
    for friend in collection:
        if collection[friend] == city:
            print("В городе", collection[friend], "живёт",
                  friend, "." "Обязательно зайду в гости!")
        else:
            print("В городе", collection[friend],
                  "у меня есть друг, но мне туда не надо.")


is_anyone_in(friends, 'Хабаровск')
